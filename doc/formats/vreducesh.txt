  • Index
  • December 2023

VREDUCESH — Perform Reduction Transformation on Scalar FP16 Value

Instruction En bit Mode Flag Support Instruction En bit Mode Flag Support 64/32 CPUID Feature Instruction En bit Mode Flag CPUID
Feature Instruction En bit Mode Flag Op/ 64/32 CPUID Feature Instruction En bit Mode Flag 64/32 CPUID Feature Instruction En bit    Support                                                          Description
                          Mode Flag CPUID Feature Instruction En bit Mode Flag Op/ 64/32 CPUID Feature
                                                                                                                                                        Perform a reduction transformation on the low binary encoded FP16 value in xmm3/m16 by subtracting a
EVEX.LLIG.NP.0F3A.W0 57 /r /ib VREDUCESH xmm1{k1}{z}, xmm2, xmm3/m16 {sae}, imm8                                                  A V/V     AVX512-FP16 number of fraction bits specified by the imm8 field. Store the result in xmm1 subject to writemask k1.
                                                                                                                                                        Bits 127:16 from xmm2 are copied to xmm1[127:16].

Instruction Operand Encoding ¶

Op/En Tuple    Operand 1     Operand 2     Operand 3    Operand 4
A     Scalar ModRM:reg (w)  VEX.vvvv (r) ModRM:r/m (r)  imm8 (r)

Description ¶

This instruction performs a reduction transformation of the low binary encoded FP16 value in the source operand (the second operand) and store the reduced result in binary FP format to the low element of the destination operand (the first operand) under
the writemask k1. For further details see the description of VREDUCEPH.

Bits 127:16 of the destination operand are copied from the corresponding bits of the first source operand. Bits MAXVL-1:128 of the destination operand are zeroed. The low FP16 element of the destination is updated according to the writemask.

This instruction might end up with a precision exception set. However, in case of SPE set (i.e., Suppress Precision Exception, which is imm8[3]=1), no precision exception is reported.

This instruction may generate tiny non-zero result. If it does so, it does not report underflow exception, even if underflow exceptions are unmasked (UM flag in MXCSR register is 0).

For special cases, see Table 5-30.

