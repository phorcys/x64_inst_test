  • Index
  • December 2023

INT n/INTO/INT3/INT1 — Call to Interrupt Procedure

Opcode Instruction Op/En 64-Bit Mode Compat/Leg Mode                              Description
CC     INT3        ZO    Valid       Valid           Generate breakpoint trap.
CD ib  INT imm8    I     Valid       Valid           Generate software interrupt with vector specified by immediate byte.
CE     INTO        ZO    Invalid     Valid           Generate overflow trap if overflow flag is 1.
F1     INT1        ZO    Valid       Valid           Generate debug trap.

Instruction Operand Encoding ¶

Op/En Operand 1  Operand 2  Operand 3  Operand 4
ZO    N/A        N/A        N/A        N/A
I     imm8       N/A        N/A        N/A

Description ¶

The INT n instruction generates a call to the interrupt or exception handler specified with the destination operand (see the section titled “Interrupts and Exceptions” in Chapter 6 of the Intel^® 64 and IA-32 Architectures Software Developer’s Manual,
Volume 1). The destination operand specifies a vector from 0 to 255, encoded as an 8-bit unsigned intermediate value. Each vector provides an index to a gate descriptor in the IDT. The first 32 vectors are reserved by Intel for system use. Some of these
vectors are used for internally generated exceptions.

The INT n instruction is the general mnemonic for executing a software-generated call to an interrupt handler. The INTO instruction is a special mnemonic for calling overflow exception (#OF), exception 4. The overflow interrupt checks the OF flag in the
EFLAGS register and calls the overflow interrupt handler if the OF flag is set to 1. (The INTO instruction cannot be used in 64-bit mode.)

The INT3 instruction uses a one-byte opcode (CC) and is intended for calling the debug exception handler with a breakpoint exception (#BP). (This one-byte form is useful because it can replace the first byte of any instruction at which a breakpoint is
desired, including other one-byte instructions, without overwriting other instructions.)

The INT1 instruction also uses a one-byte opcode (F1) and generates a debug exception (#DB) without setting any bits in DR6.^1 Hardware vendors may use the INT1 instruction for hardware debug. For that reason, Intel recommends software vendors instead
use the INT3 instruction for software breakpoints.

    1. The mnemonic ICEBP has also been used for the instruction with opcode F1.

An interrupt generated by the INTO, INT3, or INT1 instruction differs from one generated by INT n in the following ways:

  • The normal IOPL checks do not occur in virtual-8086 mode. The interrupt is taken (without fault) with any IOPL value.
  • The interrupt redirection enabled by the virtual-8086 mode extensions (VME) does not occur. The interrupt is always handled by a protected-mode handler.

(These features do not pertain to CD03, the “normal” 2-byte opcode for INT 3. Intel and Microsoft assemblers will not generate the CD03 opcode from any mnemonic, but this opcode can be created by direct numeric code definition or by self-modifying code.)

The action of the INT n instruction (including the INTO, INT3, and INT1 instructions) is similar to that of a far call made with the CALL instruction. The primary difference is that with the INT n instruction, the EFLAGS register is pushed onto the stack
before the return address. (The return address is a far address consisting of the current values of the CS and EIP registers.) Returns from interrupt procedures are handled with the IRET instruction, which pops the EFLAGS information and return address
from the stack.

Each of the INT n, INTO, and INT3 instructions generates a general-protection exception (#GP) if the CPL is greater than the DPL value in the selected gate descriptor in the IDT. In contrast, the INT1 instruction can deliver a #DB

even if the CPL is greater than the DPL of descriptor 1 in the IDT. (This behavior supports the use of INT1 by hardware vendors performing hardware debug.)

The vector specifies an interrupt descriptor in the interrupt descriptor table (IDT); that is, it provides index into the IDT. The selected interrupt descriptor in turn contains a pointer to an interrupt or exception handler procedure. In protected mode,
the IDT contains an array of 8-byte descriptors, each of which is an interrupt gate, trap gate, or task gate. In real-address mode, the IDT is an array of 4-byte far pointers (2-byte code segment selector and a 2-byte instruction pointer), each of which
point directly to a procedure in the selected segment. (Note that in real-address mode, the IDT is called the interrupt vector table, and its pointers are called interrupt vectors.)

The following decision table indicates which action in the lower portion of the table is taken given the conditions in the upper portion of the table. Each Y in the lower section of the decision table represents a procedure defined in the “Operation”
section for this instruction (except #GP).

PE                                0 1        1    1                 1                 1                 1                 1
VM                                – –        –    –                 –                 0                 1                 1
IOPL                              – –        –    –                 –                 –                 <3                =3
DPL/CPL RELATIONSHIP              – DPL< CPL –    DPL> CPL          DPL= CPL or C     DPL< CPL & NC     –                 –
INTERRUPT TYPE                    – S/W      –    –                 –                 –                 –                 –
GATE TYPE                         – –        Task Trap or Interrupt Trap or Interrupt Trap or Interrupt Trap or Interrupt Trap or Interrupt
REAL-ADDRESS-MODE                 Y
PROTECTED-MODE                      Y        Y    Y                 Y                 Y                 Y                 Y
TRAP-OR-INTERRUPTGATE                             Y                 Y                 Y                 Y                 Y
INTER-PRIVILEGE-LEVELINTERRUPT                                                        Y
INTRA-PRIVILEGE-LEVELINTERRUPT                                      Y
INTERRUPT-FROM-VIRTUAL-8086-MODE                                                                                          Y
TASK-GATE                                    Y
#GP                                 Y             Y                                                     Y


Table 3-52. Decision Table

    − Don't Care.

    Y Yes, action taken.

    Blank Action not taken.

    S/W Applies to INT n, INT3, and INTO, but not to INT1.

When the processor is executing in virtual-8086 mode, the IOPL determines the action of the INT n instruction. If the IOPL is less than 3, the processor generates a #GP(selector) exception; if the IOPL is 3, the processor executes a protected mode
interrupt to privilege level 0. The interrupt gate's DPL must be set to 3 and the target CPL of the interrupt handler procedure must be 0 to execute the protected mode interrupt to privilege level 0.

The interrupt descriptor table register (IDTR) specifies the base linear address and limit of the IDT. The initial base address value of the IDTR after the processor is powered up or reset is 0.

Refer to Chapter 6, “Procedure Calls, Interrupts, and Exceptions” and Chapter 17, “Control-flow Enforcement Technology (CET)” in the Intel^® 64 and IA-32 Architectures Software Developer’s Manual, Volume 1, for CET details.

Instruction ordering. Instructions following an INT n may be fetched from memory before earlier instructions complete execution, but they will not execute (even speculatively) until all instructions prior to the INT n have completed execution (the later
instructions may execute before data stored by the earlier instructions have become globally visible). This applies also to the INTO, INT3, and INT1 instructions, but not to executions of INTO when EFLAGS.OF = 0.

