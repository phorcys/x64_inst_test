  • Index
  • December 2023

ADC — Add With Carry

     Opcode        Instruction    Op/En 64-bit Mode Compat/Leg Mode                      Description
14 ib            ADC AL, imm8     I     Valid       Valid           Add with carry imm8 to AL.
15 iw            ADC AX, imm16    I     Valid       Valid           Add with carry imm16 to AX.
15 id            ADC EAX, imm32   I     Valid       Valid           Add with carry imm32 to EAX.
REX.W + 15 id    ADC RAX, imm32   I     Valid       N.E.            Add with carry imm32 sign extended to 64-bits to RAX.
80 /2 ib         ADC r/m8, imm8   MI    Valid       Valid           Add with carry imm8 to r/m8.
REX + 80 /2 ib   ADC r/m8^*, imm8 MI    Valid       N.E.            Add with carry imm8 to r/m8.
81 /2 iw         ADC r/m16, imm16 MI    Valid       Valid           Add with carry imm16 to r/m16.
81 /2 id         ADC r/m32, imm32 MI    Valid       Valid           Add with CF imm32 to r/m32.
REX.W + 81 /2 id ADC r/m64, imm32 MI    Valid       N.E.            Add with CF imm32 sign extended to 64-bits to r/m64.
83 /2 ib         ADC r/m16, imm8  MI    Valid       Valid           Add with CF sign-extended imm8 to r/m16.
83 /2 ib         ADC r/m32, imm8  MI    Valid       Valid           Add with CF sign-extended imm8 into r/m32.
REX.W + 83 /2 ib ADC r/m64, imm8  MI    Valid       N.E.            Add with CF sign-extended imm8 into r/m64.
10 /r            ADC r/m8, r8     MR    Valid       Valid           Add with carry byte register to r/m8.
REX + 10 /r      ADC r/m8^*, r8^* MR    Valid       N.E.            Add with carry byte register to r/m64.
11 /r            ADC r/m16, r16   MR    Valid       Valid           Add with carry r16 to r/m16.
11 /r            ADC r/m32, r32   MR    Valid       Valid           Add with CF r32 to r/m32.
REX.W + 11 /r    ADC r/m64, r64   MR    Valid       N.E.            Add with CF r64 to r/m64.
12 /r            ADC r8, r/m8     RM    Valid       Valid           Add with carry r/m8 to byte register.
REX + 12 /r      ADC r8^*, r/m8^* RM    Valid       N.E.            Add with carry r/m64 to byte register.
13 /r            ADC r16, r/m16   RM    Valid       Valid           Add with carry r/m16 to r16.
13 /r            ADC r32, r/m32   RM    Valid       Valid           Add with CF r/m32 to r32.
REX.W + 13 /r    ADC r64, r/m64   RM    Valid       N.E.            Add with CF r/m64 to r64.

    *In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH.

Instruction Operand Encoding ¶

Op/En     Operand 1       Operand 2    Operand 3 Operand 4
RM    ModRM:reg (r, w)  ModRM:r/m (r)  N/A       N/A
MR    ModRM:r/m (r, w)  ModRM:reg (r)  N/A       N/A
MI    ModRM:r/m (r, w)  imm8/16/32     N/A       N/A
I     AL/AX/EAX/RAX     imm8/16/32     N/A       N/A

Description ¶

Adds the destination operand (first operand), the source operand (second operand), and the carry (CF) flag and stores the result in the destination operand. The destination operand can be a register or a memory location; the source operand can be an
immediate, a register, or a memory location. (However, two memory operands cannot be used in one instruction.) The state of the CF flag represents a carry from a previous addition. When an immediate value is used as an operand, it is sign-extended to the
length of the destination operand format.

The ADC instruction does not distinguish between signed or unsigned operands. Instead, the processor evaluates the result for both data types and sets the OF and CF flags to indicate a carry in the signed or unsigned result, respectively. The SF flag
indicates the sign of the signed result.

The ADC instruction is usually executed as part of a multibyte or multiword addition in which an ADD instruction is followed by an ADC instruction.

This instruction can be used with a LOCK prefix to allow the instruction to be executed atomically.

In 64-bit mode, the instruction’s default operation size is 32 bits. Using a REX prefix in the form of REX.R permits access to additional registers (R8-R15). Using a REX prefix in the form of REX.W promotes operation to 64 bits. See the summary chart at
the beginning of this section for encoding data and limits.

