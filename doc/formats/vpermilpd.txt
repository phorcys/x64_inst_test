  • Index
  • December 2023

VPERMILPD — Permute In-Lane of Pairs of Double Precision Floating-Point Values

                           Opcode/Instruction                            Op / En    64/32 bit Mode       CPUID Feature                                                                Description
                                                                                        Support              Flag
VEX.128.66.0F38.W0 0D /r VPERMILPD xmm1, xmm2, xmm3/m128                 A       V/V                   AVX               Permute double precision floating-point values in xmm2 using controls from xmm3/m128 and store result in xmm1.
VEX.256.66.0F38.W0 0D /r VPERMILPD ymm1, ymm2, ymm3/m256                 A       V/V                   AVX               Permute double precision floating-point values in ymm2 using controls from ymm3/m256 and store result in ymm1.
EVEX.128.66.0F38.W1 0D /r VPERMILPD xmm1 {k1}{z}, xmm2, xmm3/m128/       C       V/V                   AVX512VL AVX512F  Permute double precision floating-point values in xmm2 using control from xmm3/m128/m64bcst and store the result in xmm1 using
m64bcst                                                                                                                  writemask k1.
EVEX.256.66.0F38.W1 0D /r VPERMILPD ymm1 {k1}{z}, ymm2, ymm3/m256/       C       V/V                   AVX512VL AVX512F  Permute double precision floating-point values in ymm2 using control from ymm3/m256/m64bcst and store the result in ymm1 using
m64bcst                                                                                                                  writemask k1.
EVEX.512.66.0F38.W1 0D /r VPERMILPD zmm1 {k1}{z}, zmm2, zmm3/m512/       C       V/V                   AVX512F           Permute double precision floating-point values in zmm2 using control from zmm3/m512/m64bcst and store the result in zmm1 using
m64bcst                                                                                                                  writemask k1.
VEX.128.66.0F3A.W0 05 /r ib VPERMILPD xmm1, xmm2/m128, imm8              B       V/V                   AVX               Permute double precision floating-point values in xmm2/m128 using controls from imm8.
VEX.256.66.0F3A.W0 05 /r ib VPERMILPD ymm1, ymm2/m256, imm8              B       V/V                   AVX               Permute double precision floating-point values in ymm2/m256 using controls from imm8.
EVEX.128.66.0F3A.W1 05 /r ib VPERMILPD xmm1 {k1}{z}, xmm2/m128/m64bcst,  D       V/V                   AVX512VL AVX512F  Permute double precision floating-point values in xmm2/m128/m64bcst using controls from imm8 and store the result in xmm1 using
imm8                                                                                                                     writemask k1.
EVEX.256.66.0F3A.W1 05 /r ib VPERMILPD ymm1 {k1}{z}, ymm2/m256/m64bcst,  D       V/V                   AVX512VL AVX512F  Permute double precision floating-point values in ymm2/m256/m64bcst using controls from imm8 and store the result in ymm1 using
imm8                                                                                                                     writemask k1.
EVEX.512.66.0F3A.W1 05 /r ib VPERMILPD zmm1 {k1}{z}, zmm2/m512/m64bcst,  D       V/V                   AVX512F           Permute double precision floating-point values in zmm2/m512/m64bcst using controls from imm8 and store the result in zmm1 using
imm8                                                                                                                     writemask k1.

Instruction Operand Encoding ¶

Op/En Tuple Type   Operand 1      Operand 2      Operand 3    Operand 4
A     N/A        ModRM:reg (w)  VEX.vvvv (r)   ModRM:r/m (r)  N/A
B     N/A        ModRM:reg (w)  ModRM:r/m (r)  N/A            N/A
C     Full       ModRM:reg (w)  EVEX.vvvv (r)  ModRM:r/m (r)  N/A
D     Full       ModRM:reg (w)  ModRM:r/m (r)  N/A            N/A

Description ¶

(variable control version)

Permute pairs of double precision floating-point values in the first source operand (second operand), each using a 1-bit control field residing in the corresponding quadword element of the second source operand (third operand). Permuted results are
stored in the destination operand (first operand).

The control bits are located at bit 0 of each quadword element (see Figure 5-24). Each control determines which of the source element in an input pair is selected for the destination element. Each pair of source elements must lie in the same 128-bit
region as the destination.

EVEX version: The second source operand (third operand) is a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 64-bit memory location. Permuted results are written to the destination under the
writemask.

X3 X2 X1 X0 SRC1 DEST X2..X3 X2..X3 X0..X1 X0..X1
Figure 5-23. VPERMILPD Operation

VEX.256 encoded version: Bits (MAXVL-1:256) of the corresponding ZMM register are zeroed.

Bit 6665 1 255 194193 2 127 63 . . . ignored ignored sel sel sel Control Field 4 Control Field 2 Control Field1
Figure 5-24. VPERMILPD Shuffle Control

Immediate control version: Permute pairs of double precision floating-point values in the first source operand (second operand), each pair using a 1-bit control field in the imm8 byte. Each element in the destination operand (first operand) use a
separate control bit of the imm8 byte.

VEX version: The source operand is a YMM/XMM register or a 256/128-bit memory location and the destination operand is a YMM/XMM register. Imm8 byte provides the lower 4/2 bit as permute control fields.

EVEX version: The source operand (second operand) is a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 64-bit memory location. Permuted results are written to the destination under the writemask.
Imm8 byte provides the lower 8/4/2 bit as permute control fields.

Note: For the imm8 versions, VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instruction will #UD.

