  • Index
  • December 2023

VPCMPB/VPCMPUB — Compare Packed Byte Values Into Mask

                     Opcode/Instruction                      Op/En    64/32 bit Mode     CPUID Feature                                                                        Description
                                                                         Support              Flag
EVEX.128.66.0F3A.W0 3F /r ib VPCMPB k1 {k2}, xmm2, xmm3/     A     V/V                  AVX512VL         Compare packed signed byte values in xmm3/m128 and xmm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in
m128, imm8                                                                              AVX512BW         mask register k1.
EVEX.256.66.0F3A.W0 3F /r ib VPCMPB k1 {k2}, ymm2, ymm3/     A     V/V                  AVX512VL         Compare packed signed byte values in ymm3/m256 and ymm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in
m256, imm8                                                                              AVX512BW         mask register k1.
EVEX.512.66.0F3A.W0 3F /r ib VPCMPB k1 {k2}, zmm2, zmm3/     A     V/V                  AVX512BW         Compare packed signed byte values in zmm3/m512 and zmm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in
m512, imm8                                                                                               mask register k1.
EVEX.128.66.0F3A.W0 3E /r ib VPCMPUB k1 {k2}, xmm2, xmm3/    A     V/V                  AVX512VL         Compare packed unsigned byte values in xmm3/m128 and xmm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in
m128, imm8                                                                              AVX512BW         mask register k1.
EVEX.256.66.0F3A.W0 3E /r ib VPCMPUB k1 {k2}, ymm2, ymm3/    A     V/V                  AVX512VL         Compare packed unsigned byte values in ymm3/m256 and ymm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in
m256, imm8                                                                              AVX512BW         mask register k1.
EVEX.512.66.0F3A.W0 3E /r ib VPCMPUB k1 {k2}, zmm2, zmm3/    A     V/V                  AVX512BW         Compare packed unsigned byte values in zmm3/m512 and zmm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in
m512, imm8                                                                                               mask register k1.

Instruction Operand Encoding ¶

Op/En Tuple Type   Operand 1      Operand 2      Operand 3    Operand 4
A     Full Mem   ModRM:reg (w)  EVEX.vvvv (r)  ModRM:r/m (r)  N/A

Description ¶

Performs a SIMD compare of the packed byte values in the second source operand and the first source operand and returns the results of the comparison to the mask destination operand. The comparison predicate operand (immediate byte) specifies the type of
comparison performed on each pair of packed values in the two source operands. The result of each comparison is a single mask bit result of 1 (comparison true) or 0 (comparison false).

VPCMPB performs a comparison between pairs of signed byte values.

VPCMPUB performs a comparison between pairs of unsigned byte values.

The first source operand (second operand) is a ZMM/YMM/XMM register. The second source operand can be a ZMM/YMM/XMM register or a 512/256/128-bit memory location. The destination operand (first operand) is a mask register k1. Up to 64/32/16 comparisons
are performed with results written to the destination operand under the writemask k2.

The comparison predicate operand is an 8-bit immediate: bits 2:0 define the type of comparison to be performed. Bits 3 through 7 of the immediate are reserved. Compiler can implement the pseudo-op mnemonic listed in Table 5-21.

         Pseudo-Op              PCMPM Implementation
VPCMPEQ* reg1, reg2, reg3    VPCMP* reg1, reg2, reg3, 0
VPCMPLT* reg1, reg2, reg3    VPCMP*reg1, reg2, reg3, 1
VPCMPLE* reg1, reg2, reg3    VPCMP* reg1, reg2, reg3, 2
VPCMPNEQ* reg1, reg2, reg3   VPCMP* reg1, reg2, reg3, 4
VPPCMPNLT* reg1, reg2, reg3  VPCMP* reg1, reg2, reg3, 5
VPCMPNLE* reg1, reg2, reg3   VPCMP* reg1, reg2, reg3, 6


Table 5-21. Pseudo-Op and VPCMP* Implementation

