  • Index
  • December 2023

VPERMILPS — Permute In-Lane of Quadruples of Single Precision Floating-Point Values

                           Opcode/Instruction                             Op / En    64/32 bit Mode       CPUID Feature                                                               Description
                                                                                         Support              Flag
VEX.128.66.0F38.W0 0C /r VPERMILPS xmm1, xmm2, xmm3/m128                  A       V/V                   AVX               Permute single-precision floating-point values in xmm2 using controls from xmm3/m128 and store result in xmm1.
VEX.128.66.0F3A.W0 04 /r ib VPERMILPS xmm1, xmm2/m128, imm8               B       V/V                   AVX               Permute single-precision floating-point values in xmm2/m128 using controls from imm8 and store result in xmm1.
VEX.256.66.0F38.W0 0C /r VPERMILPS ymm1, ymm2, ymm3/m256                  A       V/V                   AVX               Permute single-precision floating-point values in ymm2 using controls from ymm3/m256 and store result in ymm1.
VEX.256.66.0F3A.W0 04 /r ib VPERMILPS ymm1, ymm2/m256, imm8               B       V/V                   AVX               Permute single-precision floating-point values in ymm2/m256 using controls from imm8 and store result in ymm1.
EVEX.128.66.0F38.W0 0C /r VPERMILPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst C       V/V                   AVX512VL AVX512F  Permute single-precision floating-point values xmm2 using control from xmm3/m128/m32bcst and store the result in xmm1 using
                                                                                                                          writemask k1.
EVEX.256.66.0F38.W0 0C /r VPERMILPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst C       V/V                   AVX512VL AVX512F  Permute single-precision floating-point values ymm2 using control from ymm3/m256/m32bcst and store the result in ymm1 using
                                                                                                                          writemask k1.
EVEX.512.66.0F38.W0 0C /r VPERMILPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst C       V/V                   AVX512F           Permute single-precision floating-point values zmm2 using control from zmm3/m512/m32bcst and store the result in zmm1 using
                                                                                                                          writemask k1.
EVEX.128.66.0F3A.W0 04 /r ib VPERMILPS xmm1 {k1}{z}, xmm2/m128/m32bcst,   D       V/V                   AVX512VL AVX512F  Permute single-precision floating-point values xmm2/m128/m32bcst using controls from imm8 and store the result in xmm1 using
imm8                                                                                                                      writemask k1.
EVEX.256.66.0F3A.W0 04 /r ib VPERMILPS ymm1 {k1}{z}, ymm2/m256/m32bcst,   D       V/V                   AVX512VL AVX512F  Permute single-precision floating-point values ymm2/m256/m32bcst using controls from imm8 and store the result in ymm1 using
imm8                                                                                                                      writemask k1.
EVEX.512.66.0F3A.W0 04 /r ibVPERMILPS zmm1 {k1}{z}, zmm2/m512/m32bcst,    D       V/V                   AVX512F           Permute single-precision floating-point values zmm2/m512/m32bcst using controls from imm8 and store the result in zmm1 using
imm8                                                                                                                      writemask k1.

Instruction Operand Encoding ¶

Op/En Tuple Type   Operand 1      Operand 2      Operand 3    Operand 4
A     N/A        ModRM:reg (w)  VEX.vvvv (r)   ModRM:r/m (r)  N/A
B     N/A        ModRM:reg (w)  ModRM:r/m (r)  N/A            N/A
C     Full       ModRM:reg (w)  EVEX.vvvv (r)  ModRM:r/m (r)  N/A
D     Full       ModRM:reg (w)  ModRM:r/m (r)  N/A            N/A

Description ¶

Variable control version:

Permute quadruples of single-precision floating-point values in the first source operand (second operand), each quadruplet using a 2-bit control field in the corresponding dword element of the second source operand. Permuted results are stored in the
destination operand (first operand).

The 2-bit control fields are located at the low two bits of each dword element (see Figure 5-26). Each control determines which of the source element in an input quadruple is selected for the destination element. Each quadruple of source elements must
lie in the same 128-bit region as the destination.

EVEX version: The second source operand (third operand) is a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32-bit memory location. Permuted results are written to the destination under the
writemask.

X7 X6 X5 X4 X3 X2 X1 X0 SRC1 X7..X4 X7..X4 X7..X4 X7..X4 X3..X0 X3..X0 DEST X3..X0 X3..X0
Figure 5-25. VPERMILPS Operation

Bit 31 255 226 225 224 33 32 1 0 63 34 . . . ignored ignored sel sel sel Control Field 7 Control Field 2 Control Field 1
Figure 5-26. VPERMILPS Shuffle Control

(immediate control version)

Permute quadruples of single-precision floating-point values in the first source operand (second operand), each quadruplet using a 2-bit control field in the imm8 byte. Each 128-bit lane in the destination operand (first operand) use the four control
fields of the same imm8 byte.

VEX version: The source operand is a YMM/XMM register or a 256/128-bit memory location and the destination operand is a YMM/XMM register.

EVEX version: The source operand (second operand) is a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32-bit memory location. Permuted results are written to the destination under the writemask.

Note: For the imm8 version, VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instruction will #UD.

