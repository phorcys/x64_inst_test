  • Index
  • December 2023

MOVZX — Move With Zero-Extend

     Opcode         Instruction    Op/En 64-Bit Mode Compat/Leg Mode                Description
0F B6 /r         MOVZX r16, r/m8   RM    Valid       Valid           Move byte to word with zero-extension.
0F B6 /r         MOVZX r32, r/m8   RM    Valid       Valid           Move byte to doubleword, zero-extension.
REX.W + 0F B6 /r MOVZX r64, r/m8^1 RM    Valid       N.E.            Move byte to quadword, zero-extension.
0F B7 /r         MOVZX r32, r/m16  RM    Valid       Valid           Move word to doubleword, zero-extension.
REX.W + 0F B7 /r MOVZX r64, r/m16  RM    Valid       N.E.            Move word to quadword, zero-extension.

    1. In 64-bit mode, r/m8 can not be encoded to access the following byte registers if the REX prefix is used: AH, BH, CH, DH.

Instruction Operand Encoding ¶

Op/En   Operand 1      Operand 2    Operand 3 Operand 4
RM    ModRM:reg (w)  ModRM:r/m (r)  N/A       N/A

Description ¶

Copies the contents of the source operand (register or memory location) to the destination operand (register) and zero extends the value. The size of the converted value depends on the operand-size attribute.

In 64-bit mode, the instruction’s default operation size is 32 bits. Use of the REX.R prefix permits access to additional registers (R8-R15). Use of the REX.W prefix promotes operation to 64 bit operands. See the summary chart at the beginning of this
section for encoding data and limits.

