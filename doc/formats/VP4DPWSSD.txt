  • Index
  • December 2023

VP4DPWSSD — Dot Product of Signed Words With Dword Accumulation (4-Iterations)

                     Opcode/Instruction                       Op/En 64/32 bit Mode Support CPUID Feature Flag                                                                 Description
EVEX.512.F2.0F38.W0 52 /r VP4DPWSSD zmm1{k1}{z}, zmm2+3, m128 A     V/V                    AVX512_4VNNIW      Multiply signed words from source register block indicated by zmm2 by signed words from m128 and accumulate resulting signed dwords in zmm1.

Instruction Operand Encoding ¶

Op/En   Tuple       Operand 1      Operand 2 Operand 3 Operand 4
A     Tuple1_4X ModRM:reg (r, w)  EVEX.vvvv (r) ModRM:r/m (r) N/A

Description ¶

This instruction computes 4 sequential register source-block dot-products of two signed word operands with doubleword accumulation; see Figure 8-1 below. The memory operand is sequentially selected in each of the four steps.

In the above box, the notation of “+3”' is used to denote that the instruction accesses 4 source registers based on that operand; sources are consecutive, start in a multiple of 4 boundary, and contain the encoded register operand.

This instruction supports memory fault suppression. The entire memory operand is loaded if any bit of the lowest 16-bits of the mask is set to 1 or if a “no masking” encoding is used.

The tuple type Tuple1_4X implies that four 32-bit elements (16 bytes) are referenced by the memory operation portion of this instruction.

16 16 16 16b a a a a0 b b b b0 32 32b c c0 c1=c1+a2*b0+a3*b1 c0=c0+a0*b0+a1*b1 32 32b
Figure 8-1. Register Source-Block Dot Product of Two Signed Word Operands With Doubleword Accumulation^1

    1. For illustration purposes, one source-block dot product instance is shown out of the four.

