  • Index
  • December 2023

VFMADD132SH/VFNMADD132SH/VFMADD213SH/VFNMADD213SH/VFMADD231SH/VFNMADD231SH — Fused Multiply-Add of Scalar FP16 Values

Instruction En Bit Mode Flag Support Instruction En Bit Mode Flag Support 64/32 CPUID Feature Instruction En Bit Mode Flag CPUID Feature Instruction En Bit Mode Flag Op   Support                                       Description
 / 64/32 CPUID Feature Instruction En Bit Mode Flag 64/32 CPUID Feature Instruction En Bit Mode Flag CPUID Feature Instruction En Bit Mode Flag Op/ 64/32 CPUID Feature
EVEX.LLIG.66.MAP6.W0 99 /r VFMADD132SH xmm1{k1}{z}, xmm2, xmm3/m16 {er}                                                                                                  A V/V     AVX512-FP16 Multiply FP16 values from xmm1 and xmm3/m16, add to xmm2, and
                                                                                                                                                                                               store the result in xmm1.
EVEX.LLIG.66.MAP6.W0 A9 /r VFMADD213SH xmm1{k1}{z}, xmm2, xmm3/m16 {er}                                                                                                  A V/V     AVX512-FP16 Multiply FP16 values from xmm1 and xmm2, add to xmm3/m16, and
                                                                                                                                                                                               store the result in xmm1.
EVEX.LLIG.66.MAP6.W0 B9 /r VFMADD231SH xmm1{k1}{z}, xmm2, xmm3/m16 {er}                                                                                                  A V/V     AVX512-FP16 Multiply FP16 values from xmm2 and xmm3/m16, add to xmm1, and
                                                                                                                                                                                               store the result in xmm1.
EVEX.LLIG.66.MAP6.W0 9D /r VFNMADD132SH xmm1{k1}{z}, xmm2, xmm3/m16 {er}                                                                                                 A V/V     AVX512-FP16 Multiply FP16 values from xmm1 and xmm3/m16, and negate the
                                                                                                                                                                                               value. Add this value to xmm2, and store the result in xmm1.
EVEX.LLIG.66.MAP6.W0 AD /r VFNMADD213SH xmm1{k1}{z}, xmm2, xmm3/m16 {er}                                                                                                 A V/V     AVX512-FP16 Multiply FP16 values from xmm1 and xmm2, and negate the value.
                                                                                                                                                                                               Add this value to xmm3/m16, and store the result in xmm1.
EVEX.LLIG.66.MAP6.W0 BD /r VFNMADD231SH xmm1{k1}{z}, xmm2, xmm3/m16 {er}                                                                                                 A V/V     AVX512-FP16 Multiply FP16 values from xmm2 and xmm3/m16, and negate the
                                                                                                                                                                                               value. Add this value to xmm1, and store the result in xmm1.

Instruction Operand Encoding ¶

Op/En Tuple      Operand 1      Operand 2     Operand 3    Operand 4
A     Scalar ModRM:reg (r, w)  VEX.vvvv (r) ModRM:r/m (r)  N/A

Description ¶

Performs a scalar multiply-add or negated multiply-add computation on the low FP16 values using three source operands and writes the result in the destination operand. The destination operand is also the first source operand. The “N” (negated) forms of
this instruction add the negated infinite precision intermediate product to the corresponding remaining operand. The notation’ “132”, “213” and “231” indicate the use of the operands in ±A * B + C, where each digit corresponds to the operand number, with
the destination being operand 1; see Table 5-4.

Bits 127:16 of the destination operand are preserved. Bits MAXVL-1:128 of the destination operand are zeroed. The low FP16 element of the destination is updated according to the writemask.

Notation         Operands
132      dest = ± dest*src3+src2
231      dest = ± src2*src3+dest
213      dest = ± src2*dest+src3


Table 5-4. VF[,N]MADD[132,213,231]SH Notation for Operands

