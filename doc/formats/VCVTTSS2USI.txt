  • Index
  • December 2023

VCVTTSS2USI — Convert With Truncation Scalar Single Precision Floating-Point Value toUnsigned Integer

                  Opcode/Instruction                    Op/En 64/32 Bit Mode Support CPUID Feature Flag                                                         Description
EVEX.LLIG.F3.0F.W0 78 /r VCVTTSS2USI r32, xmm1/m32{sae} A     V/V                    AVX512F            Convert one single precision floating-point value from xmm1/m32 to one unsigned doubleword integer in r32 using truncation.
EVEX.LLIG.F3.0F.W1 78 /r VCVTTSS2USI r64, xmm1/m32{sae} A     V/N.E.^1               AVX512F            Convert one single precision floating-point value from xmm1/m32 to one unsigned quadword integer in r64 using truncation.

    1. For this specific instruction, EVEX.W in non-64 bit is ignored; the instruction behaves as if the W0 version is used.

Instruction Operand Encoding ¶

Op/En  Tuple Type    Operand 1      Operand 2    Operand 3 Operand 4
A     Tuple1 Fixed ModRM:reg (w)  ModRM:r/m (r)  N/A       N/A

Description ¶

Converts with truncation a single precision floating-point value in the source operand (the second operand) to an unsigned doubleword integer (or unsigned quadword integer if operand size is 64 bits) in the destination operand (the first operand). The
source operand can be an XMM register or a memory location. The destination operand is a general-purpose register. When the source operand is an XMM register, the single precision floating-point value is contained in the low doubleword of the register.

When a conversion is inexact, a truncated (round toward zero) value is returned. If a converted result cannot be represented in the destination format, the floating-point invalid exception is raised, and if this exception is masked, the integer value 2^w
– 1 is returned, where w represents the number of bits in the destination format.

EVEX.W1 version: promotes the instruction to produce 64-bit data in 64-bit mode.

Note: EVEX.vvvv is reserved and must be 1111b, otherwise instructions will #UD.

