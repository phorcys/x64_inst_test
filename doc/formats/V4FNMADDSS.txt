  • Index
  • December 2023

V4FMADDSS/V4FNMADDSS — Scalar Single Precision Floating-Point Fused Multiply-Add(4-Iterations)

                    Opcode/Instruction                     Op/En    64/32 bit Mode     CPUID Feature                                                                         Description
                                                                       Support              Flag
EVEX.LLIG.F2.0F38.W0 9B /r V4FMADDSS xmm1{k1}{z}, xmm2+3,  A     V/V                  AVX512_4FMAPS    Multiply scalar single-precision floating-point values from source register block indicated by xmm2 by values from m128 and accumulate the result in
m128                                                                                                   xmm1.
EVEX.LLIG.F2.0F38.W0 AB /r V4FNMADDSS xmm1{k1}{z}, xmm2+3, A     V/V                  AVX512_4FMAPS    Multiply and negate scalar single-precision floating-point values from source register block indicated by xmm2 by values from m128 and accumulate the
m128                                                                                                   result in xmm1.

Instruction Operand Encoding ¶

     Op/En Tuple Operand 1 Operand 2 Operand 3 Operand 4
A Tuple1_4X ModRM:reg (r, w) EVEX.vvvv (r) ModRM:r/m (r) N/A

Description ¶

This instruction computes 4 sequential scalar fused single-precision floating-point multiply-add instructions with a sequentially selected memory operand in each of the four steps.

In the above box, the notation of “+3” is used to denote that the instruction accesses 4 source registers based that operand; sources are consecutive, start in a multiple of 4 boundary, and contain the encoded register operand.

This instruction supports memory fault suppression. The entire memory operand is loaded if the least significant mask bit is set to 1 or if a “no masking” encoding is used.

The tuple type Tuple1_4X implies that four 32-bit elements (16 bytes) are referenced by the memory operation portion of this instruction.

Rounding is performed at every FMA boundary. Exceptions are also taken sequentially. Pre- and post-computational exceptions of the first FMA take priority over the pre- and post-computational exceptions of the second FMA, etc.

