  • Index
  • December 2023

FIST/FISTP — Store Integer

Opcode Instruction  64-Bit Mode Compat/Leg Mode                   Description
DF /2  FIST m16int  Valid       Valid            Store ST(0) in m16int.
DB /2  FIST m32int  Valid       Valid            Store ST(0) in m32int.
DF /3  FISTP m16int Valid       Valid            Store ST(0) in m16int and pop register stack.
DB /3  FISTP m32int Valid       Valid            Store ST(0) in m32int and pop register stack.
DF /7  FISTP m64int Valid       Valid            Store ST(0) in m64int and pop register stack.

Description ¶

The FIST instruction converts the value in the ST(0) register to a signed integer and stores the result in the destination operand. Values can be stored in word or doubleword integer format. The destination operand specifies the address where the first
byte of the destination value is to be stored.

The FISTP instruction performs the same operation as the FIST instruction and then pops the register stack. To pop the register stack, the processor marks the ST(0) register as empty and increments the stack pointer (TOP) by 1. The FISTP instruction also
stores values in quadword integer format.

The following table shows the results obtained when storing various classes of numbers in integer format.

                                                                     ST(0)                                                                            DEST
− ∞ or Value Too Large for DEST Format                                                                                                           *
F ≤ −1                                                                                                                                           −I
−1 < F < −0                                                                                                                                      **
−0                                                                                                                                               0
+0                                                                                                                                               0
+0<F<+1                                                                                                                                          **
F≥+1                                                                                                                                             +I
+ ∞ or Value Too Large for DEST Format                                                                                                           *
NaN                                                                                                                                              *
NOTES: F Meansfinitefloating-pointvalue. I Means integer. * Indicatesfloating-pointinvalid-operation(#IA)exception. ** 0 or ±1, depending on the rounding mode.


Table 3-27. FIST/FISTP Results

If the source value is a non-integral value, it is rounded to an integer value, according to the rounding mode specified by the RC field of the FPU control word.

If the converted value is too large for the destination format, or if the source operand is an ∞, SNaN, QNAN, or is in an unsupported format, an invalid-arithmetic-operand condition is signaled. If the invalid-operation exception is not masked, an
invalid-arithmetic-operand exception (#IA) is generated and no value is stored in the destination operand. If the invalid-operation exception is masked, the integer indefinite value is stored in memory.

This instruction’s operation is the same in non-64-bit modes and 64-bit mode.

