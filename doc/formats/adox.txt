  • Index
  • December 2023

ADOX — Unsigned Integer Addition of Two Operands With Overflow Flag

         Opcode/Instruction          Op/En 64/32bit Mode Support CPUID Feature Flag                         Description
F3 0F 38 F6 /r ADOX r32, r/m32       RM    V/V                   ADX                Unsigned addition of r32 with OF, r/m32 to r32, writes OF.
F3 REX.w 0F 38 F6 /r ADOX r64, r/m64 RM    V/N.E.                ADX                Unsigned addition of r64 with OF, r/m64 to r64, writes OF.

Instruction Operand Encoding ¶

Op/En     Operand 1       Operand 2    Operand 3 Operand 4
RM    ModRM:reg (r, w)  ModRM:r/m (r)  N/A       N/A

Description ¶

Performs an unsigned addition of the destination operand (first operand), the source operand (second operand) and the overflow-flag (OF) and stores the result in the destination operand. The destination operand is a general-purpose register, whereas the
source operand can be a general-purpose register or memory location. The state of OF represents a carry from a previous addition. The instruction sets the OF flag with the carry generated by the unsigned addition of the operands.

The ADOX instruction is executed in the context of multi-precision addition, where we add a series of operands with a carry-chain. At the beginning of a chain of additions, we execute an instruction to zero the OF (e.g. XOR).

This instruction is supported in real mode and virtual-8086 mode. The operand size is always 32 bits if not in 64-bit mode.

In 64-bit mode, the default operation size is 32 bits. Using a REX Prefix in the form of REX.R permits access to additional registers (R8-15). Using REX Prefix in the form of REX.W promotes operation to 64-bits.

ADOX executes normally either inside or outside a transaction region.

Note: ADOX defines the CF and OF flags differently than the ADD/ADC instructions as defined in Intel^® 64 and IA-32 Architectures Software Developer’s Manual, Volume 2A.

