  • Index
  • December 2023

SBB — Integer Subtraction With Borrow

     Opcode        Instruction    Op/En 64-Bit Mode Compat/Leg Mode                           Description
1C ib            SBB AL, imm8     I     Valid       Valid           Subtract with borrow imm8 from AL.
1D iw            SBB AX, imm16    I     Valid       Valid           Subtract with borrow imm16 from AX.
1D id            SBB EAX, imm32   I     Valid       Valid           Subtract with borrow imm32 from EAX.
REX.W + 1D id    SBB RAX, imm32   I     Valid       N.E.            Subtract with borrow sign-extended imm.32 to 64-bits from RAX.
80 /3 ib         SBB r/m8, imm8   MI    Valid       Valid           Subtract with borrow imm8 from r/m8.
REX + 80 /3 ib   SBB r/m8^1, imm8 MI    Valid       N.E.            Subtract with borrow imm8 from r/m8.
81 /3 iw         SBB r/m16, imm16 MI    Valid       Valid           Subtract with borrow imm16 from r/m16.
81 /3 id         SBB r/m32, imm32 MI    Valid       Valid           Subtract with borrow imm32 from r/m32.
REX.W + 81 /3 id SBB r/m64, imm32 MI    Valid       N.E.            Subtract with borrow sign-extended imm32 to 64-bits from r/m64.
83 /3 ib         SBB r/m16, imm8  MI    Valid       Valid           Subtract with borrow sign-extended imm8 from r/m16.
83 /3 ib         SBB r/m32, imm8  MI    Valid       Valid           Subtract with borrow sign-extended imm8 from r/m32.
REX.W + 83 /3 ib SBB r/m64, imm8  MI    Valid       N.E.            Subtract with borrow sign-extended imm8 from r/m64.
18 /r            SBB r/m8, r8     MR    Valid       Valid           Subtract with borrow r8 from r/m8.
REX + 18 /r      SBB r/m8^1, r8   MR    Valid       N.E.            Subtract with borrow r8 from r/m8.
19 /r            SBB r/m16, r16   MR    Valid       Valid           Subtract with borrow r16 from r/m16.
19 /r            SBB r/m32, r32   MR    Valid       Valid           Subtract with borrow r32 from r/m32.
REX.W + 19 /r    SBB r/m64, r64   MR    Valid       N.E.            Subtract with borrow r64 from r/m64.
1A /r            SBB r8, r/m8     RM    Valid       Valid           Subtract with borrow r/m8 from r8.
REX + 1A /r      SBB r8^1, r/m8^1 RM    Valid       N.E.            Subtract with borrow r/m8 from r8.
1B /r            SBB r16, r/m16   RM    Valid       Valid           Subtract with borrow r/m16 from r16.
1B /r            SBB r32, r/m32   RM    Valid       Valid           Subtract with borrow r/m32 from r32.
REX.W + 1B /r    SBB r64, r/m64   RM    Valid       N.E.            Subtract with borrow r/m64 from r64.

    1. In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH.

Instruction Operand Encoding ¶

Op/En   Operand 1      Operand 2    Operand 3 Operand 4
I     AL/AX/EAX/RAX  imm8/16/32     N/A       N/A
MI    ModRM:r/m (w)  imm8/16/32     N/A       N/A
MR    ModRM:r/m (w)  ModRM:reg (r)  N/A       N/A
RM    ModRM:reg (w)  ModRM:r/m (r)  N/A       N/A

Description ¶

Adds the source operand (second operand) and the carry (CF) flag, and subtracts the result from the destination operand (first operand). The result of the subtraction is stored in the destination operand. The destination operand can be a register or a
memory location; the source operand can be an immediate, a register, or a memory location.

(However, two memory operands cannot be used in one instruction.) The state of the CF flag represents a borrow from a previous subtraction.

When an immediate value is used as an operand, it is sign-extended to the length of the destination operand format.

The SBB instruction does not distinguish between signed or unsigned operands. Instead, the processor evaluates the result for both data types and sets the OF and CF flags to indicate a borrow in the signed or unsigned result, respectively. The SF flag
indicates the sign of the signed result.

The SBB instruction is usually executed as part of a multibyte or multiword subtraction in which a SUB instruction is followed by a SBB instruction.

This instruction can be used with a LOCK prefix to allow the instruction to be executed atomically.

In 64-bit mode, the instruction’s default operation size is 32 bits. Using a REX prefix in the form of REX.R permits access to additional registers (R8-R15). Using a REX prefix in the form of REX.W promotes operation to 64 bits. See the summary chart at
the beginning of this section for encoding data and limits.

