  • Index
  • December 2023

INSERTPS — Insert Scalar Single Precision Floating-Point Value

             Opcode/Instruction               Op /  64/32 bit Mode     CPUID                                                                                      Description
                                               En       Support     Feature Flag
66 0F 3A 21 /r ib INSERTPS xmm1, xmm2/m32,    A     V/V             SSE4_1       Insert a single precision floating-point value selected by imm8 from xmm2/m32 into xmm1 at the specified destination element specified by imm8 and zero out destination
imm8                                                                             elements in xmm1 as indicated in imm8.
VEX.128.66.0F3A.WIG 21 /r ib VINSERTPS xmm1,  B     V/V             AVX          Insert a single precision floating-point value selected by imm8 from xmm3/m32 and merge with values in xmm2 at the specified destination element specified by imm8 and write
xmm2, xmm3/m32, imm8                                                             out the result and zero out destination elements in xmm1 as indicated in imm8.
EVEX.128.66.0F3A.W0 21 /r ib VINSERTPS xmm1,  C     V/V             AVX512F      Insert a single precision floating-point value selected by imm8 from xmm3/m32 and merge with values in xmm2 at the specified destination element specified by imm8 and write
xmm2, xmm3/m32, imm8                                                             out the result and zero out destination elements in xmm1 as indicated in imm8.

Instruction Operand Encoding ¶

Op/En  Tuple Type       Operand 1       Operand 2     Operand 3   Operand 4
A     N/A           ModRM:reg (r, w)  ModRM:r/m (r) imm8          N/A
B     N/A           ModRM:reg (w)     VEX.vvvv (r)  ModRM:r/m (r) imm8
C     Tuple1 Scalar ModRM:reg (w)     EVEX.vvvv (r) ModRM:r/m (r) imm8

Description ¶

(register source form)

Copy a single precision scalar floating-point element into a 128-bit vector register. The immediate operand has three fields, where the ZMask bits specify which elements of the destination will be set to zero, the Count_D bits specify which element of
the destination will be overwritten with the scalar value, and for vector register sources the Count_S bits specify which element of the source will be copied. When the scalar source is a memory operand the Count_S bits are ignored.

(memory source form)

Load a floating-point element from a 32-bit memory location and destination operand it into the first source at the location indicated by the Count_D bits of the immediate operand. Store in the destination and zero out destination elements based on the
ZMask bits of the immediate operand.

128-bit Legacy SSE version: The first source register is an XMM register. The second source operand is either an XMM register or a 32-bit memory location. The destination is not distinct from the first source XMM register and the upper bits (MAXVL-1:128)
of the corresponding register destination are unmodified.

VEX.128 and EVEX encoded version: The destination and first source register is an XMM register. The second source operand is either an XMM register or a 32-bit memory location. The upper bits (MAXVL-1:128) of the corresponding register destination are
zeroed.

If VINSERTPS is encoded with VEX.L= 1, an attempt to execute the instruction encoded with VEX.L= 1 will cause an #UD exception.

