  • Index
  • December 2023

VGETMANTPD — Extract Float64 Vector of Normalized Mantissas From Float64 Vector

                         Opcode/Instruction                           Op/    64/32 Bit Mode     CPUID Feature                                                                    Description
                                                                       En        Support            Flag
EVEX.128.66.0F3A.W1 26 /r ib VGETMANTPD xmm1 {k1}{z}, xmm2/m128/      A    V/V                 AVX512VL        Get Normalized Mantissa from float64 vector xmm2/m128/m64bcst and store the result in xmm1, using imm8 for sign control and mantissa interval
m64bcst, imm8                                                                                  AVX512F         normalization, under writemask.
EVEX.256.66.0F3A.W1 26 /r ib VGETMANTPD ymm1 {k1}{z}, ymm2/m256/      A    V/V                 AVX512VL        Get Normalized Mantissa from float64 vector ymm2/m256/m64bcst and store the result in ymm1, using imm8 for sign control and mantissa interval
m64bcst, imm8                                                                                  AVX512F         normalization, under writemask.
EVEX.512.66.0F3A.W1 26 /r ib VGETMANTPD zmm1 {k1}{z}, zmm2/m512/      A    V/V                 AVX512F         Get Normalized Mantissa from float64 vector zmm2/m512/m64bcst and store the result in zmm1, using imm8 for sign control and mantissa interval
m64bcst{sae}, imm8                                                                                             normalization, under writemask.

Instruction Operand Encoding ¶

Op/En Tuple Type   Operand 1      Operand 2    Operand 3 Operand 4
A     Full       ModRM:reg (w)  ModRM:r/m (r)  imm8      N/A

Description ¶

Convert double precision floating values in the source operand (the second operand) to double precision floating-point values with the mantissa normalization and sign control specified by the imm8 byte, see Figure 5-15. The converted results are written
to the destination operand (the first operand) using writemask k1. The normalized mantissa is specified by interv (imm8[1:0]) and the sign control (sc) is specified by bits 3:2 of the immediate byte.

The destination operand is a ZMM/YMM/XMM register updated under the writemask. The source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location, or a 512/256/128-bit vector broadcasted from a 64-bit memory location.

0 imm8 Must Be Zero Sign Control (SC) Normaiization Interval Imm8[1:0] = 00b : Interval is [ 1, 2) Imm8[3:2] = 00b : sign(SRC) Imm8[1:0] = 01b : Interval is [1/2, 2) Imm8[3:2] = 01b : 0 Imm8[1:0] = 10b : Interval is [ 1/2, 1) Imm8[3] = 1b :
qNan_Indefinite if sign(SRC) != 0, regardless of imm8[2]. Imm8[1:0] = 11b : Interval is [3/4, 3/2)
Figure 5-15. Imm8 Controls for VGETMANTPD/SD/PS/SS

For each input double precision floating-point value x, The conversion operation is:

GetMant(x) = ±2^k|x.significand|

where:

1 <= |x.significand| < 2

Unbiased exponent k can be either 0 or -1, depending on the interval range defined by interv, the range of the significand and whether the exponent of the source is even or odd. The sign of the final result is determined by sc

and the source sign. The encoded value of imm8[1:0] and sign control are shown in Figure 5-15.

Each converted double precision floating-point result is encoded according to the sign control, the unbiased exponent k (adding bias) and a mantissa normalized to the range specified by interv.

The GetMant() function follows Table 5-18 when dealing with floating-point special numbers.

This instruction is writemasked, so only those elements with the corresponding bit set in vector mask register k1 are computed and stored into the destination. Elements in zmm1 with the corresponding bit clear in k1 retain their previous values.

Note: EVEX.vvvv is reserved and must be 1111b; otherwise instructions will #UD.

 Input                                    Result                                          Exceptions / Comments
NaN      QNaN(SRC)                                                                Ignore interv If (SRC = SNaN) then #IE
+∞       1.0                                                                      Ignore interv
+0       1.0                                                                      Ignore interv
-0       IF (SC[0]) THEN +1.0 ELSE -1.0                                           Ignore interv
-∞       IF (SC[1]) THEN {QNaN_Indefinite} ELSE { IF (SC[0]) THEN +1.0 ELSE -1.0  Ignore interv If (SC[1]) then #IE
negative SC[1] ? QNaN_Indefinite : Getmant(SRC)^1                                 If (SC[1]) then #IE


Table 5-18. GetMant() Special Float Values Behavior

    1. In case SC[1]==0, the sign of Getmant(SRC) is declared according to SC[0].

