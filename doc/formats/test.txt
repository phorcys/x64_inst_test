  • Index
  • December 2023

TEST — Logical Compare

     Opcode         Instruction    Op/En 64-Bit Mode Compat/Leg Mode                                     Description
A8 ib            TEST AL, imm8     I     Valid       Valid           AND imm8 with AL; set SF, ZF, PF according to result.
A9 iw            TEST AX, imm16    I     Valid       Valid           AND imm16 with AX; set SF, ZF, PF according to result.
A9 id            TEST EAX, imm32   I     Valid       Valid           AND imm32 with EAX; set SF, ZF, PF according to result.
REX.W + A9 id    TEST RAX, imm32   I     Valid       N.E.            AND imm32 sign-extended to 64-bits with RAX; set SF, ZF, PF according to result.
F6 /0 ib         TEST r/m8, imm8   MI    Valid       Valid           AND imm8 with r/m8; set SF, ZF, PF according to result.
REX + F6 /0 ib   TEST r/m8^1, imm8 MI    Valid       N.E.            AND imm8 with r/m8; set SF, ZF, PF according to result.
F7 /0 iw         TEST r/m16, imm16 MI    Valid       Valid           AND imm16 with r/m16; set SF, ZF, PF according to result.
F7 /0 id         TEST r/m32, imm32 MI    Valid       Valid           AND imm32 with r/m32; set SF, ZF, PF according to result.
REX.W + F7 /0 id TEST r/m64, imm32 MI    Valid       N.E.            AND imm32 sign-extended to 64-bits with r/m64; set SF, ZF, PF according to result.
84 /r            TEST r/m8, r8     MR    Valid       Valid           AND r8 with r/m8; set SF, ZF, PF according to result.
REX + 84 /r      TEST r/m8^1, r8^1 MR    Valid       N.E.            AND r8 with r/m8; set SF, ZF, PF according to result.
85 /r            TEST r/m16, r16   MR    Valid       Valid           AND r16 with r/m16; set SF, ZF, PF according to result.
85 /r            TEST r/m32, r32   MR    Valid       Valid           AND r32 with r/m32; set SF, ZF, PF according to result.
REX.W + 85 /r    TEST r/m64, r64   MR    Valid       N.E.            AND r64 with r/m64; set SF, ZF, PF according to result.

    1. In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH.

Instruction Operand Encoding ¶

Op/En   Operand 1      Operand 2    Operand 3 Operand 4
I     AL/AX/EAX/RAX  imm8/16/32     N/A       N/A
MI    ModRM:r/m (r)  imm8/16/32     N/A       N/A
MR    ModRM:r/m (r)  ModRM:reg (r)  N/A       N/A

Description ¶

Computes the bit-wise logical AND of first operand (source 1 operand) and the second operand (source 2 operand) and sets the SF, ZF, and PF status flags according to the result. The result is then discarded.

In 64-bit mode, using a REX prefix in the form of REX.R permits access to additional registers (R8-R15). Using a REX prefix in the form of REX.W promotes operation to 64 bits. See the summary chart at the beginning of this section for encoding data and
limits.

