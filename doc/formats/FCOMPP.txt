  • Index
  • December 2023

FCOM/FCOMP/FCOMPP — Compare Floating-Point Values

Opcode  Instruction 64-Bit Mode Compat/Leg Mode                        Description
D8 /2   FCOM m32fp  Valid       Valid            Compare ST(0) with m32fp.
DC /2   FCOM m64fp  Valid       Valid            Compare ST(0) with m64fp.
D8 D0+i FCOM ST(i)  Valid       Valid            Compare ST(0) with ST(i).
D8 D1   FCOM        Valid       Valid            Compare ST(0) with ST(1).
D8 /3   FCOMP m32fp Valid       Valid            Compare ST(0) with m32fp and pop register stack.
DC /3   FCOMP m64fp Valid       Valid            Compare ST(0) with m64fp and pop register stack.
D8 D8+i FCOMP ST(i) Valid       Valid            Compare ST(0) with ST(i) and pop register stack.
D8 D9   FCOMP       Valid       Valid            Compare ST(0) with ST(1) and pop register stack.
DE D9   FCOMPP      Valid       Valid            Compare ST(0) with ST(1) and pop register stack twice.

Description ¶

Compares the contents of register ST(0) and source value and sets condition code flags C0, C2, and C3 in the FPU status word according to the results (see the table below). The source operand can be a data register or a memory location. If no source
operand is given, the value in ST(0) is compared with the value in ST(1). The sign of zero is ignored, so that –0.0 is equal to +0.0.

  Condition   C3 C2 C0
ST(0) > SRC   0  0  0
ST(0) < SRC   0  0  1
ST(0) = SRC   1  0  0
Unordered*    1  1  1


Table 3-21. FCOM/FCOMP/FCOMPP Results

    * Flagsnotsetifunmaskedinvalid-arithmetic-operand(#IA)exceptionisgenerated.

This instruction checks the class of the numbers being compared (see “FXAM—Examine Floating-Point” in this chapter). If either operand is a NaN or is in an unsupported format, an invalid-arithmetic-operand exception (#IA) is raised and, if the exception
is masked, the condition flags are set to “unordered.” If the invalid-arithmetic-operand exception is unmasked, the condition code flags are not set.

The FCOMP instruction pops the register stack following the comparison operation and the FCOMPP instruction pops the register stack twice following the comparison operation. To pop the register stack, the processor marks the ST(0) register as empty and
increments the stack pointer (TOP) by 1.

The FCOM instructions perform the same operation as the FUCOM instructions. The only difference is how they handle QNaN operands. The FCOM instructions raise an invalid-arithmetic-operand exception (#IA) when either or both of the operands is a NaN value
or is in an unsupported format. The FUCOM instructions perform the same operation as the FCOM instructions, except that they do not generate an invalid-arithmetic-operand exception for QNaNs.

This instruction’s operation is the same in non-64-bit modes and 64-bit mode.

