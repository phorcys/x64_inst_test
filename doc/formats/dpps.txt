  • Index
  • December 2023

DPPS — Dot Product of Packed Single Precision Floating-Point Values

              Opcode/Instruction               Op/  64/32-bit  CPUID Feature                                                                                    Description
                                                En     Mode        Flag
66 0F 3A 40 /r ib DPPS xmm1, xmm2/m128, imm8   RMI  V/V        SSE4_1        Selectively multiply packed single precision floating-point values from xmm1 with packed single precision floating-point values from xmm2, add and selectively store the packed
                                                                             single precision floating-point values or zero values to xmm1.
VEX.128.66.0F3A.WIG 40 /r ib VDPPS xmm1,xmm2,  RVMI V/V        AVX           Multiply packed single precision floating-point values from xmm1 with packed single precision floating-point values from xmm2/mem selectively add and store to xmm1.
xmm3/m128, imm8
VEX.256.66.0F3A.WIG 40 /r ib VDPPS ymm1, ymm2, RVMI V/V        AVX           Multiply packed single precision floating-point values from ymm2 with packed single precision floating-point values from ymm3/mem, selectively add pairs of elements and store to
ymm3/m256, imm8                                                              ymm1.

Instruction Operand Encoding ¶

Op/En     Operand 1       Operand 2     Operand 3   Operand 4
RMI   ModRM:reg (r, w)  ModRM:r/m (r) imm8          N/A
RVMI  ModRM:reg (w)     VEX.vvvv (r)  ModRM:r/m (r) imm8

Description ¶

Conditionally multiplies the packed single precision floating-point values in the destination operand (first operand) with the packed single precision floats in the source (second operand) depending on a mask extracted from the high 4 bits of the
immediate byte (third operand). If a condition mask bit in imm8[7:4] is zero, the corresponding multiplication is replaced by a value of 0.0 in the manner described by Section 12.8.4 of Intel^® 64 and IA-32 Architectures Software Developer’s Manual,
Volume 1.

The four resulting single precision values are summed into an intermediate result. The intermediate result is conditionally broadcasted to the destination using a broadcast mask specified by bits [3:0] of the immediate byte.

If a broadcast mask bit is “1”, the intermediate result is copied to the corresponding dword element in the destination operand. If a broadcast mask bit is zero, the corresponding element in the destination is set to zero.

DPPS follows the NaN forwarding rules stated in the Software Developer’s Manual, vol. 1, table 4-7. These rules do not cover horizontal prioritization of NaNs. Horizontal propagation of NaNs to the destination and the positioning of those NaNs in the
destination is implementation dependent. NaNs on the input sources or computationally generated NaNs will have at least one NaN propagated to the destination.

128-bit Legacy SSE version: The second source can be an XMM register or an 128-bit memory location. The destination is not distinct from the first source XMM register and the upper bits (MAXVL-1:128) of the corresponding YMM register destination are
unmodified.

VEX.128 encoded version: the first source operand is an XMM register or 128-bit memory location. The destination operand is an XMM register. The upper bits (MAXVL-1:128) of the corresponding YMM register destination are zeroed.

VEX.256 encoded version: The first source operand is a YMM register. The second source operand can be a YMM register or a 256-bit memory location. The destination operand is a YMM register.

